
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Mar 19 19:24:23 CET 2015
//----------------------------------------------------

package fsb.parser;

import java_cup.runtime.*;
import fsb.ast.*;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Mar 19 19:24:23 CET 2015
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\135\000\002\043\004\000\002\002\004\000\002\043" +
    "\005\000\002\002\004\000\002\003\005\000\002\004\005" +
    "\000\002\005\005\000\002\005\003\000\002\006\004\000" +
    "\002\006\003\000\002\010\004\000\002\007\005\000\002" +
    "\011\007\000\002\011\006\000\002\011\004\000\002\011" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\044\003\000" +
    "\002\024\012\000\002\026\010\000\002\025\010\000\002" +
    "\013\006\000\002\014\006\000\002\014\006\000\002\041" +
    "\003\000\002\041\005\000\002\021\007\000\002\033\012" +
    "\000\002\034\013\000\002\015\005\000\002\015\005\000" +
    "\002\016\006\000\002\017\003\000\002\022\012\000\002" +
    "\023\010\000\002\027\006\000\002\020\003\000\002\030" +
    "\003\000\002\030\003\000\002\032\004\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\005\000" +
    "\002\035\005\000\002\035\005\000\002\035\004\000\002" +
    "\035\005\000\002\035\005\000\002\035\005\000\002\035" +
    "\005\000\002\036\003\000\002\036\003\000\002\036\005" +
    "\000\002\036\005\000\002\036\005\000\002\036\005\000" +
    "\002\042\006\000\002\042\006\000\002\037\003\000\002" +
    "\037\003\000\002\037\003\000\002\037\005\000\002\037" +
    "\005\000\002\037\005\000\002\037\004\000\002\037\005" +
    "\000\002\037\005\000\002\037\005\000\002\037\005\000" +
    "\002\040\003\000\002\040\006\000\002\040\006\000\002" +
    "\040\005\000\002\040\003\000\002\040\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\324\000\004\031\007\001\002\000\004\002\326\001" +
    "\002\000\004\030\322\001\002\000\004\052\016\001\002" +
    "\000\004\067\011\001\002\000\006\016\013\020\012\001" +
    "\002\000\006\016\ufffa\020\ufffa\001\002\000\004\067\014" +
    "\001\002\000\004\030\ufffd\001\002\000\006\016\ufffb\020" +
    "\ufffb\001\002\000\010\002\001\051\307\054\311\001\002" +
    "\000\006\066\022\070\021\001\002\000\010\002\ufff8\051" +
    "\ufff8\054\ufff8\001\002\000\014\002\ufff7\051\ufff7\054\ufff7" +
    "\066\301\070\021\001\002\000\014\002\uffdf\051\uffdf\054" +
    "\uffdf\066\uffdf\070\uffdf\001\002\000\004\017\024\001\002" +
    "\000\014\002\ufff2\051\ufff2\054\ufff2\066\ufff2\070\ufff2\001" +
    "\002\000\042\032\055\033\064\034\040\036\066\037\037" +
    "\040\025\041\042\042\065\043\050\044\033\045\067\046" +
    "\041\060\034\061\032\062\052\067\031\001\002\000\004" +
    "\067\275\001\002\000\004\016\uffe2\001\002\000\004\016" +
    "\uffe8\001\002\000\004\016\274\001\002\000\004\021\263" +
    "\001\002\000\004\016\uffca\001\002\000\004\024\254\001" +
    "\002\000\004\016\uffcb\001\002\000\004\016\uffe5\001\002" +
    "\000\004\016\uffe6\001\002\000\004\016\uffcc\001\002\000" +
    "\020\006\135\015\134\024\133\064\130\065\132\066\100" +
    "\067\101\001\002\000\004\024\244\001\002\000\004\067" +
    "\235\001\002\000\004\016\uffee\001\002\000\004\016\uffe3" +
    "\001\002\000\004\016\uffe9\001\002\000\004\016\uffe7\001" +
    "\002\000\004\016\uffed\001\002\000\004\067\232\001\002" +
    "\000\004\016\uffe1\001\002\000\024\006\175\015\174\022" +
    "\176\024\173\057\166\064\170\065\172\066\167\067\164" +
    "\001\002\000\004\016\uffe0\001\002\000\004\016\uffea\001" +
    "\002\000\004\067\161\001\002\000\004\016\ufff0\001\002" +
    "\000\004\016\uffeb\001\002\000\004\016\uffec\001\002\000" +
    "\004\016\ufff1\001\002\000\004\016\uffef\001\002\000\004" +
    "\016\uffe4\001\002\000\006\022\071\067\073\001\002\000" +
    "\004\067\114\001\002\000\004\016\uffd0\001\002\000\004" +
    "\024\070\001\002\000\006\022\071\067\073\001\002\000" +
    "\010\024\102\066\100\067\101\001\002\000\004\020\074" +
    "\001\002\000\014\007\uffd8\016\uffd8\020\uffd8\021\uffd8\025" +
    "\uffd8\001\002\000\006\022\071\067\073\001\002\000\004" +
    "\025\076\001\002\000\004\016\uffdc\001\002\000\012\004" +
    "\104\005\106\006\105\023\113\001\002\000\036\004\uffbc" +
    "\005\uffbc\006\uffbc\007\uffbc\010\uffbc\011\uffbc\012\uffbc\013" +
    "\uffbc\014\uffbc\016\uffbc\020\uffbc\023\uffbc\025\uffbc\035\uffbc" +
    "\001\002\000\036\004\uffbd\005\uffbd\006\uffbd\007\uffbd\010" +
    "\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd\016\uffbd\020\uffbd" +
    "\023\uffbd\025\uffbd\035\uffbd\001\002\000\010\024\102\066" +
    "\100\067\101\001\002\000\012\004\104\005\106\006\105" +
    "\025\107\001\002\000\010\024\102\066\100\067\101\001" +
    "\002\000\010\024\102\066\100\067\101\001\002\000\010" +
    "\024\102\066\100\067\101\001\002\000\036\004\uffbb\005" +
    "\uffbb\006\uffbb\007\uffbb\010\uffbb\011\uffbb\012\uffbb\013\uffbb" +
    "\014\uffbb\016\uffbb\020\uffbb\023\uffbb\025\uffbb\035\uffbb\001" +
    "\002\000\036\004\uffb9\005\uffb9\006\105\007\uffb9\010\uffb9" +
    "\011\uffb9\012\uffb9\013\uffb9\014\uffb9\016\uffb9\020\uffb9\023" +
    "\uffb9\025\uffb9\035\uffb9\001\002\000\036\004\uffb8\005\uffb8" +
    "\006\uffb8\007\uffb8\010\uffb8\011\uffb8\012\uffb8\013\uffb8\014" +
    "\uffb8\016\uffb8\020\uffb8\023\uffb8\025\uffb8\035\uffb8\001\002" +
    "\000\036\004\uffba\005\uffba\006\105\007\uffba\010\uffba\011" +
    "\uffba\012\uffba\013\uffba\014\uffba\016\uffba\020\uffba\023\uffba" +
    "\025\uffba\035\uffba\001\002\000\014\007\uffd7\016\uffd7\020" +
    "\uffd7\021\uffd7\025\uffd7\001\002\000\004\020\115\001\002" +
    "\000\006\022\071\067\073\001\002\000\004\020\117\001" +
    "\002\000\010\024\102\066\100\067\101\001\002\000\012" +
    "\004\104\005\106\006\105\016\uffce\001\002\000\004\021" +
    "\122\001\002\000\014\006\124\024\102\063\125\066\100" +
    "\067\101\001\002\000\012\004\104\005\106\006\105\016" +
    "\uffda\001\002\000\004\016\uffd9\001\002\000\004\024\126" +
    "\001\002\000\020\006\135\015\134\024\133\064\130\065" +
    "\132\066\100\067\101\001\002\000\010\013\137\014\140" +
    "\020\156\001\002\000\014\013\uffc7\014\uffc7\020\uffc7\025" +
    "\uffc7\035\uffc7\001\002\000\020\004\104\005\106\006\105" +
    "\007\146\010\150\011\147\012\145\001\002\000\014\013" +
    "\uffc6\014\uffc6\020\uffc6\025\uffc6\035\uffc6\001\002\000\020" +
    "\006\135\015\134\024\133\064\130\065\132\066\100\067" +
    "\101\001\002\000\020\006\135\015\134\024\133\064\130" +
    "\065\132\066\100\067\101\001\002\000\014\013\uffc8\014" +
    "\uffc8\020\uffc8\025\uffc8\035\uffc8\001\002\000\014\013\uffc2" +
    "\014\uffc2\020\uffc2\025\uffc2\035\uffc2\001\002\000\020\006" +
    "\135\015\134\024\133\064\130\065\132\066\100\067\101" +
    "\001\002\000\020\006\135\015\134\024\133\064\130\065" +
    "\132\066\100\067\101\001\002\000\014\013\137\014\uffc4" +
    "\020\uffc4\025\uffc4\035\uffc4\001\002\000\014\013\uffc3\014" +
    "\uffc3\020\uffc3\025\uffc3\035\uffc3\001\002\000\010\013\137" +
    "\014\140\025\155\001\002\000\022\004\104\005\106\006" +
    "\105\007\146\010\150\011\147\012\145\025\107\001\002" +
    "\000\010\024\102\066\100\067\101\001\002\000\010\024" +
    "\102\066\100\067\101\001\002\000\010\024\102\066\100" +
    "\067\101\001\002\000\010\024\102\066\100\067\101\001" +
    "\002\000\022\004\104\005\106\006\105\013\uffc0\014\uffc0" +
    "\020\uffc0\025\uffc0\035\uffc0\001\002\000\022\004\104\005" +
    "\106\006\105\013\uffbf\014\uffbf\020\uffbf\025\uffbf\035\uffbf" +
    "\001\002\000\022\004\104\005\106\006\105\013\uffc1\014" +
    "\uffc1\020\uffc1\025\uffc1\035\uffc1\001\002\000\022\004\104" +
    "\005\106\006\105\013\uffbe\014\uffbe\020\uffbe\025\uffbe\035" +
    "\uffbe\001\002\000\014\013\uffc5\014\uffc5\020\uffc5\025\uffc5" +
    "\035\uffc5\001\002\000\020\006\135\015\134\024\133\064" +
    "\130\065\132\066\100\067\101\001\002\000\010\013\137" +
    "\014\140\025\160\001\002\000\004\016\uffd4\001\002\000" +
    "\004\021\162\001\002\000\006\022\071\067\073\001\002" +
    "\000\004\016\uffdb\001\002\000\026\007\uffaa\010\uffaa\011" +
    "\uffaa\012\uffaa\013\uffaa\014\uffaa\016\uffaa\023\uffaa\025\uffaa" +
    "\026\227\001\002\000\010\013\205\014\206\016\uffc9\001" +
    "\002\000\004\026\224\001\002\000\024\007\uffa6\010\uffa6" +
    "\011\uffa6\012\uffa6\013\uffa6\014\uffa6\016\uffa6\023\uffa6\025" +
    "\uffa6\001\002\000\012\013\uffb4\014\uffb4\016\uffb4\025\uffb4" +
    "\001\002\000\012\007\214\010\216\011\215\012\213\001" +
    "\002\000\012\013\uffb3\014\uffb3\016\uffb3\025\uffb3\001\002" +
    "\000\024\006\175\015\174\022\176\024\173\057\166\064" +
    "\170\065\172\066\167\067\164\001\002\000\024\006\175" +
    "\015\174\022\176\024\173\057\166\064\170\065\172\066" +
    "\167\067\164\001\002\000\012\013\uffb5\014\uffb5\016\uffb5" +
    "\025\uffb5\001\002\000\014\022\176\024\200\057\166\066" +
    "\167\067\164\001\002\000\004\023\203\001\002\000\014" +
    "\022\176\024\200\057\166\066\167\067\164\001\002\000" +
    "\004\025\202\001\002\000\024\007\uffa5\010\uffa5\011\uffa5" +
    "\012\uffa5\013\uffa5\014\uffa5\016\uffa5\023\uffa5\025\uffa5\001" +
    "\002\000\024\007\uffa7\010\uffa7\011\uffa7\012\uffa7\013\uffa7" +
    "\014\uffa7\016\uffa7\023\uffa7\025\uffa7\001\002\000\012\013" +
    "\uffaf\014\uffaf\016\uffaf\025\uffaf\001\002\000\024\006\175" +
    "\015\174\022\176\024\173\057\166\064\170\065\172\066" +
    "\167\067\164\001\002\000\024\006\175\015\174\022\176" +
    "\024\173\057\166\064\170\065\172\066\167\067\164\001" +
    "\002\000\012\013\205\014\uffb1\016\uffb1\025\uffb1\001\002" +
    "\000\012\013\uffb0\014\uffb0\016\uffb0\025\uffb0\001\002\000" +
    "\010\013\205\014\206\025\223\001\002\000\014\007\214" +
    "\010\216\011\215\012\213\025\202\001\002\000\014\022" +
    "\176\024\200\057\166\066\167\067\164\001\002\000\014" +
    "\022\176\024\200\057\166\066\167\067\164\001\002\000" +
    "\014\022\176\024\200\057\166\066\167\067\164\001\002" +
    "\000\014\022\176\024\200\057\166\066\167\067\164\001" +
    "\002\000\012\013\uffad\014\uffad\016\uffad\025\uffad\001\002" +
    "\000\012\013\uffac\014\uffac\016\uffac\025\uffac\001\002\000" +
    "\012\013\uffae\014\uffae\016\uffae\025\uffae\001\002\000\012" +
    "\013\uffab\014\uffab\016\uffab\025\uffab\001\002\000\012\013" +
    "\uffb2\014\uffb2\016\uffb2\025\uffb2\001\002\000\004\066\225" +
    "\001\002\000\004\027\226\001\002\000\024\007\uffa8\010" +
    "\uffa8\011\uffa8\012\uffa8\013\uffa8\014\uffa8\016\uffa8\023\uffa8" +
    "\025\uffa8\001\002\000\004\066\230\001\002\000\004\027" +
    "\231\001\002\000\024\007\uffa9\010\uffa9\011\uffa9\012\uffa9" +
    "\013\uffa9\014\uffa9\016\uffa9\023\uffa9\025\uffa9\001\002\000" +
    "\004\020\233\001\002\000\006\022\071\067\073\001\002" +
    "\000\004\016\uffcd\001\002\000\004\020\236\001\002\000" +
    "\006\022\071\067\073\001\002\000\004\007\240\001\002" +
    "\000\010\024\102\066\100\067\101\001\002\000\012\004" +
    "\104\005\106\006\105\020\242\001\002\000\010\024\102" +
    "\066\100\067\101\001\002\000\012\004\104\005\106\006" +
    "\105\016\uffcf\001\002\000\006\022\071\067\073\001\002" +
    "\000\004\020\246\001\002\000\006\022\071\067\073\001" +
    "\002\000\004\025\250\001\002\000\004\016\uffdd\001\002" +
    "\000\010\013\137\014\140\035\252\001\002\000\004\066" +
    "\253\001\002\000\004\016\uffd1\001\002\000\006\022\071" +
    "\067\073\001\002\000\004\020\256\001\002\000\006\022" +
    "\071\067\073\001\002\000\004\020\260\001\002\000\006" +
    "\022\071\067\073\001\002\000\004\025\262\001\002\000" +
    "\004\016\uffde\001\002\000\014\006\265\024\102\063\266" +
    "\066\100\067\101\001\002\000\012\004\104\005\106\006" +
    "\105\016\uffd3\001\002\000\004\016\uffd2\001\002\000\004" +
    "\024\267\001\002\000\020\006\135\015\134\024\133\064" +
    "\130\065\132\066\100\067\101\001\002\000\010\013\137" +
    "\014\140\020\271\001\002\000\020\006\135\015\134\024" +
    "\133\064\130\065\132\066\100\067\101\001\002\000\010" +
    "\013\137\014\140\025\273\001\002\000\004\016\uffd5\001" +
    "\002\000\014\002\ufff4\051\ufff4\054\ufff4\066\ufff4\070\ufff4" +
    "\001\002\000\004\022\276\001\002\000\010\024\102\066" +
    "\100\067\101\001\002\000\012\004\104\005\106\006\105" +
    "\023\300\001\002\000\004\016\uffd6\001\002\000\004\017" +
    "\303\001\002\000\014\002\ufff3\051\ufff3\054\ufff3\066\ufff3" +
    "\070\ufff3\001\002\000\042\032\055\033\064\034\040\036" +
    "\066\037\037\040\025\041\042\042\065\043\050\044\033" +
    "\045\067\046\041\060\034\061\032\062\052\067\031\001" +
    "\002\000\004\016\305\001\002\000\014\002\ufff5\051\ufff5" +
    "\054\ufff5\066\ufff5\070\ufff5\001\002\000\010\002\ufff9\051" +
    "\ufff9\054\ufff9\001\002\000\004\066\320\001\002\000\004" +
    "\002\uffff\001\002\000\006\055\312\056\313\001\002\000" +
    "\024\006\175\015\174\022\176\024\173\057\166\064\170" +
    "\065\172\066\167\067\164\001\002\000\024\006\175\015" +
    "\174\022\176\024\173\057\166\064\170\065\172\066\167" +
    "\067\164\001\002\000\010\013\205\014\206\016\315\001" +
    "\002\000\004\002\uffb6\001\002\000\010\013\205\014\206" +
    "\016\317\001\002\000\004\002\uffb7\001\002\000\006\066" +
    "\022\070\021\001\002\000\014\002\ufff6\051\ufff6\054\ufff6" +
    "\066\301\070\021\001\002\000\004\067\011\001\002\000" +
    "\004\052\ufffe\001\002\000\006\016\325\020\012\001\002" +
    "\000\004\052\ufffc\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\324\000\010\002\005\003\004\043\003\001\001\000" +
    "\002\001\001\000\004\004\322\001\001\000\006\006\014" +
    "\010\016\001\001\000\004\005\007\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\305\042\307\001\001\000" +
    "\006\011\017\044\022\001\001\000\002\001\001\000\004" +
    "\044\301\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\050\012\027\013\060\014\055\015\061" +
    "\016\042\017\043\020\046\021\057\022\056\023\053\024" +
    "\025\025\052\026\050\027\044\030\026\031\045\032\035" +
    "\033\034\034\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\035\250\036\130\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\037\164\040\170\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\041\120\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\041\071\001\001\000\004\036\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\041\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\036\102\001\001" +
    "\000\002\001\001\000\004\036\111\001\001\000\004\036" +
    "\110\001\001\000\004\036\107\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\041\115\001\001" +
    "\000\002\001\001\000\004\036\117\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\036\122\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\035" +
    "\126\036\130\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\035\142\036" +
    "\143\001\001\000\006\035\135\036\130\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\035\141\036\130\001" +
    "\001\000\006\035\140\036\130\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\036\153\001\001\000\004\036\152\001\001\000\004" +
    "\036\151\001\001\000\004\036\150\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\035\156\036\130\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\041\162\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\037" +
    "\210\040\211\001\001\000\006\037\203\040\170\001\001" +
    "\000\002\001\001\000\004\040\176\001\001\000\002\001" +
    "\001\000\004\040\200\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\037" +
    "\207\040\170\001\001\000\006\037\206\040\170\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\040\221\001\001\000\004\040\220" +
    "\001\001\000\004\040\217\001\001\000\004\040\216\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\041" +
    "\233\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\041\236\001\001\000\002\001\001\000\004\036\240\001" +
    "\001\000\002\001\001\000\004\036\242\001\001\000\002" +
    "\001\001\000\004\041\244\001\001\000\002\001\001\000" +
    "\004\041\246\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\041\254\001\001\000\002\001\001\000\004\041\256" +
    "\001\001\000\002\001\001\000\004\041\260\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\036\263\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\035\267\036\130\001\001\000\002\001\001\000\006" +
    "\035\271\036\130\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\036\276" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\050\012\303\013\060\014\055" +
    "\015\061\016\042\017\043\020\046\021\057\022\056\023" +
    "\053\024\025\025\052\026\050\027\044\030\026\031\045" +
    "\032\035\033\034\034\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\037\315\040\170\001" +
    "\001\000\006\037\313\040\170\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\320\044\022\001\001\000\004\044\301\001\001" +
    "\000\004\005\323\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.next_token(); 
    }

 
  public boolean syntaxErrors;


  Lexer lexer;

  public parser(Lexer lex) {
      super(lex);
      lexer = lex;
  }

  
  public void report_error(String message, Object info) {
    syntaxErrors = true;
    
    System.out.println(message);
    
    if ( !(info instanceof Symbol) ) return;
    Symbol symbol = (Symbol) info;
    
    if ( symbol.left < 0 || symbol.right < 0 ) return;
    
    System.out.println(" at line "+symbol.left+", column "+symbol.right);
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // assert_arit_expr ::= LEFTPAREN assert_arit_expr RIGHTPAREN 
            {
              AssertAritExpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AssertAritExpr e = (AssertAritExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assert_arit_expr",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // assert_arit_expr ::= NUMBER 
            {
              AssertAritExpr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssertConstExpr(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assert_arit_expr",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // assert_arit_expr ::= LEFTBRACE assert_arit_expr RIGHTBRACE 
            {
              AssertAritExpr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AssertAritExpr a = (AssertAritExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AssertIndirectGlobal(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assert_arit_expr",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // assert_arit_expr ::= PC LEFTCURLY NUMBER RIGHTCURLY 
            {
              AssertAritExpr RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer p = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AssertPC(p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assert_arit_expr",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // assert_arit_expr ::= IDENT LEFTCURLY NUMBER RIGHTCURLY 
            {
              AssertAritExpr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer p = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AssertLocal(i, p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assert_arit_expr",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // assert_arit_expr ::= IDENT 
            {
              AssertAritExpr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssertGlobal(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assert_arit_expr",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // assert_bool_expr ::= assert_arit_expr GREATER assert_arit_expr 
            {
              AssertBoolExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AssertAritExpr l = (AssertAritExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AssertAritExpr r = (AssertAritExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssertComparsionBool(l, r, BoolExpr.BXType.GREATER); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assert_bool_expr",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // assert_bool_expr ::= assert_arit_expr LESS assert_arit_expr 
            {
              AssertBoolExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AssertAritExpr l = (AssertAritExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AssertAritExpr r = (AssertAritExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssertComparsionBool(l, r, BoolExpr.BXType.LESS); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assert_bool_expr",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // assert_bool_expr ::= assert_arit_expr NEQ assert_arit_expr 
            {
              AssertBoolExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AssertAritExpr l = (AssertAritExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AssertAritExpr r = (AssertAritExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssertComparsionBool(l, r, BoolExpr.BXType.NEQ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assert_bool_expr",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // assert_bool_expr ::= assert_arit_expr EQUAL assert_arit_expr 
            {
              AssertBoolExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AssertAritExpr l = (AssertAritExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AssertAritExpr r = (AssertAritExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssertComparsionBool(l, r, BoolExpr.BXType.EQUAL); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assert_bool_expr",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // assert_bool_expr ::= NOT assert_bool_expr 
            {
              AssertBoolExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AssertBoolExpr l = (AssertBoolExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssertNotBool(l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assert_bool_expr",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // assert_bool_expr ::= assert_bool_expr AND assert_bool_expr 
            {
              AssertBoolExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AssertBoolExpr l = (AssertBoolExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AssertBoolExpr r = (AssertBoolExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssertComplexBool(l, r, BoolExpr.BXType.AND); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assert_bool_expr",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // assert_bool_expr ::= assert_bool_expr OR assert_bool_expr 
            {
              AssertBoolExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AssertBoolExpr l = (AssertBoolExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AssertBoolExpr r = (AssertBoolExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssertComplexBool(l, r, BoolExpr.BXType.OR); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assert_bool_expr",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // assert_bool_expr ::= LEFTPAREN assert_bool_expr RIGHTPAREN 
            {
              AssertBoolExpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AssertBoolExpr e = (AssertBoolExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assert_bool_expr",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // assert_bool_expr ::= FALSE 
            {
              AssertBoolExpr RESULT =null;
		 RESULT = new AssertConstBool(false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assert_bool_expr",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // assert_bool_expr ::= TRUE 
            {
              AssertBoolExpr RESULT =null;
		 RESULT = new AssertConstBool(true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assert_bool_expr",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // assert_bool_expr ::= MUL 
            {
              AssertBoolExpr RESULT =null;
		 RESULT = new AssertConstBool(fsb.tvl.NondetBoolValue.getInstance()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assert_bool_expr",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // assert_block ::= ASSERT ALWAYS assert_bool_expr SEMI 
            {
              Assert RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AssertBoolExpr e = (AssertBoolExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Assert(e, true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assert_block",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // assert_block ::= ASSERT FINAL assert_bool_expr SEMI 
            {
              Assert RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AssertBoolExpr e = (AssertBoolExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Assert(e, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assert_block",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // arit_expr ::= arit_expr MUL arit_expr 
            {
              AritExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AritExpr l = (AritExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AritExpr r = (AritExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ComplexAritExpr(l, r, AritExpr.AXType.MUL); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arit_expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // arit_expr ::= arit_expr MINUS arit_expr 
            {
              AritExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AritExpr l = (AritExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AritExpr r = (AritExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ComplexAritExpr(l, r, AritExpr.AXType.MINUS); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arit_expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // arit_expr ::= arit_expr PLUS arit_expr 
            {
              AritExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AritExpr l = (AritExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AritExpr r = (AritExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ComplexAritExpr(l, r, AritExpr.AXType.PLUS); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arit_expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // arit_expr ::= LEFTPAREN arit_expr RIGHTPAREN 
            {
              AritExpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AritExpr e = (AritExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arit_expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // arit_expr ::= NUMBER 
            {
              AritExpr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConstExpr(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arit_expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // arit_expr ::= IDENT 
            {
              AritExpr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LocalExpr(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arit_expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // bool_expr ::= arit_expr GREATER arit_expr 
            {
              BoolExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AritExpr l = (AritExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AritExpr r = (AritExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ComparsionBool(l, r, BoolExpr.BXType.GREATER); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // bool_expr ::= arit_expr LESS arit_expr 
            {
              BoolExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AritExpr l = (AritExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AritExpr r = (AritExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ComparsionBool(l, r, BoolExpr.BXType.LESS); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // bool_expr ::= arit_expr NEQ arit_expr 
            {
              BoolExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AritExpr l = (AritExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AritExpr r = (AritExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ComparsionBool(l, r, BoolExpr.BXType.NEQ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // bool_expr ::= arit_expr EQUAL arit_expr 
            {
              BoolExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AritExpr l = (AritExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AritExpr r = (AritExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ComparsionBool(l, r, BoolExpr.BXType.EQUAL); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // bool_expr ::= NOT bool_expr 
            {
              BoolExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BoolExpr l = (BoolExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NotBool(l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // bool_expr ::= bool_expr AND bool_expr 
            {
              BoolExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		BoolExpr l = (BoolExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BoolExpr r = (BoolExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ComplexBool(l, r, BoolExpr.BXType.AND); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // bool_expr ::= bool_expr OR bool_expr 
            {
              BoolExpr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		BoolExpr l = (BoolExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BoolExpr r = (BoolExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ComplexBool(l, r, BoolExpr.BXType.OR); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // bool_expr ::= LEFTPAREN bool_expr RIGHTPAREN 
            {
              BoolExpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BoolExpr e = (BoolExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // bool_expr ::= FALSE 
            {
              BoolExpr RESULT =null;
		 RESULT = new ConstBool(false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // bool_expr ::= TRUE 
            {
              BoolExpr RESULT =null;
		 RESULT = new ConstBool(true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // bool_expr ::= MUL 
            {
              BoolExpr RESULT =null;
		 RESULT = new NondetBool(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // assume_stat ::= ASSUME assert_bool_expr 
            {
              Statement RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AssertBoolExpr cond = (AssertBoolExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Assume(cond); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assume_stat",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // begin_atomic_stat ::= ENDATOMIC 
            {
              Statement RESULT =null;
		 RESULT = new EndAtomic(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_atomic_stat",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // begin_atomic_stat ::= BEGINATOMIC 
            {
              Statement RESULT =null;
		 RESULT = new BeginAtomic(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_atomic_stat",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // nop_stat ::= NOP 
            {
              Statement RESULT =null;
		 RESULT = new Nop(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nop_stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // dec_stat ::= ATOMICDEC IDENT COMMA shared_val 
            {
              Statement RESULT =null;
		int dstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String dst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sharedleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sharedright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SharedVal shared = (SharedVal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AtomicDec(dst, shared); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_stat",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // swap_stat ::= SWAP IDENT COMMA shared_val COMMA arit_expr 
            {
              Statement RESULT =null;
		int dstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String dst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sharedleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sharedright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SharedVal shared = (SharedVal)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int newvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int newvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AritExpr newval = (AritExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Swap(dst, shared, newval); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("swap_stat",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // cas_stat ::= CAS IDENT COMMA shared_val EQUAL arit_expr COMMA arit_expr 
            {
              Statement RESULT =null;
		int dstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String dst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sharedleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sharedright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		SharedVal shared = (SharedVal)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AritExpr val = (AritExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int newvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int newvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AritExpr newval = (AritExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CAS(dst, shared, val, newval); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cas_stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // barrier_stat ::= BARRIER 
            {
              Statement RESULT =null;
		 RESULT = new Barrier(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("barrier_stat",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // branch_stat ::= IF bool_expr GOTO NUMBER 
            {
              Statement RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		BoolExpr cond = (BoolExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int labelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer label = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Branch(cond, label); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("branch_stat",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // assign_stat ::= IDENT ASSIGN MUL 
            {
              Statement RESULT =null;
		int dstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String dst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Assign(new NondetArit(), dst); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stat",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // assign_stat ::= IDENT ASSIGN arit_expr 
            {
              Statement RESULT =null;
		int dstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String dst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int srcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int srcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AritExpr src = (AritExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Assign(src, dst); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stat",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // choose_store_stat ::= STORE shared_val ASSIGN CHOOSE LEFTPAREN bool_expr COMMA bool_expr RIGHTPAREN 
            {
              Statement RESULT =null;
		int dstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		SharedVal dst = (SharedVal)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		BoolExpr b1 = (BoolExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BoolExpr b2 = (BoolExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ChooseStore(b1,b2, dst); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("choose_store_stat",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // choose_assign_stat ::= IDENT ASSIGN CHOOSE LEFTPAREN bool_expr COMMA bool_expr RIGHTPAREN 
            {
              Statement RESULT =null;
		int dstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String dst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		BoolExpr b1 = (BoolExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BoolExpr b2 = (BoolExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ChooseAssign(b1,b2, dst); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("choose_assign_stat",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // allocate_stat ::= ALLOCATE IDENT LEFTBRACE arit_expr RIGHTBRACE 
            {
              Statement RESULT =null;
		int dstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String dst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AritExpr num = (AritExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Allocate(dst, num); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("allocate_stat",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // shared_val ::= LEFTBRACE arit_expr RIGHTBRACE 
            {
              SharedVal RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AritExpr a = (AritExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DerefSharedVal(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shared_val",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // shared_val ::= IDENT 
            {
              SharedVal RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PrimitiveSharedVal(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shared_val",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // store_stat ::= STORE shared_val ASSIGN MUL 
            {
              Statement RESULT =null;
		int dstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SharedVal dst = (SharedVal)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Store(new NondetArit(), dst); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("store_stat",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // store_stat ::= STORE shared_val ASSIGN arit_expr 
            {
              Statement RESULT =null;
		int dstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SharedVal dst = (SharedVal)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int srcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int srcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AritExpr src = (AritExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Store(src, dst); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("store_stat",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // load_stat ::= LOAD IDENT ASSIGN shared_val 
            {
              Statement RESULT =null;
		int dstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String dst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int srcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int srcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SharedVal src = (SharedVal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Load(src, dst); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("load_stat",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // get_stat ::= GET LEFTPAREN shared_val COMMA shared_val RIGHTPAREN 
            {
              Statement RESULT =null;
		int dstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		SharedVal dst = (SharedVal)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int srcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int srcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SharedVal src = (SharedVal)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Get(dst, src); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("get_stat",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // put_stat ::= PUT LEFTPAREN shared_val COMMA shared_val RIGHTPAREN 
            {
              Statement RESULT =null;
		int dstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		SharedVal dst = (SharedVal)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int srcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int srcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SharedVal src = (SharedVal)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Put(dst, src); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("put_stat",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // rga_stat ::= RGA LEFTPAREN shared_val COMMA shared_val COMMA shared_val RIGHTPAREN 
            {
              Statement RESULT =null;
		int dstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		SharedVal dst = (SharedVal)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		SharedVal arg1 = (SharedVal)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SharedVal arg2 = (SharedVal)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Rga(dst, arg1, arg2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rga_stat",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // c_comment ::= C_COMMENT 
            {
              Comment RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Comment(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c_comment",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement ::= get_stat 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement ::= put_stat 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement ::= rga_stat 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement ::= barrier_stat 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= choose_store_stat 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement ::= choose_assign_stat 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement ::= assume_stat 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= end_atomic_stat 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= begin_atomic_stat 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement ::= dec_stat 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= swap_stat 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement ::= cas_stat 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement ::= allocate_stat 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement ::= nop_stat 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement ::= branch_stat 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement ::= assign_stat 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statement ::= store_stat 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statement ::= load_stat 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stat_list ::= c_comment 
            {
              ArrayList<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Comment s = (Comment)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Statement>(); RESULT.add(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stat_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stat_list ::= stat_list c_comment 
            {
              ArrayList<Statement> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Statement> l = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Comment s = (Comment)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(s); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stat_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stat_list ::= NUMBER COLON statement SEMI 
            {
              ArrayList<Statement> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayList<Statement>(); s.setLabel(i); RESULT.add(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stat_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stat_list ::= stat_list NUMBER COLON statement SEMI 
            {
              ArrayList<Statement> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<Statement> l = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 s.setLabel(i); l.add(s); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stat_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // proc ::= PROCESS NUMBER stat_list 
            {
              Code RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Statement> s = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Statement end = new End(); end.setLabel(-1); s.add(end); RESULT = new Code(n, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // init_code ::= INIT stat_list 
            {
              Code RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Statement> s = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Statement barrier = new Barrier(); barrier.setLabel(-2); s.add(barrier); 
	  Statement end = new End(); end.setLabel(-1); s.add(end); RESULT = new Code(0, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("init_code",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // code_area ::= init_code 
            {
              ArrayList<Code> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Code p = (Code)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Code>(); RESULT.add(p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_area",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // code_area ::= code_area proc 
            {
              ArrayList<Code> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Code> c = (ArrayList<Code>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Code p = (Code)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 c.add(p); RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_area",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // var_list ::= IDENT 
            {
              ArrayList<String> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<String>(); RESULT.add(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // var_list ::= var_list COMMA IDENT 
            {
              ArrayList<String> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<String> v = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 v.add(i); RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // local_decl ::= LOCAL var_list SEMI 
            {
              ArrayList<String> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> v = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // shared_decl ::= SHARED var_list SEMI 
            {
              ArrayList<String> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> v = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shared_decl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // decl_area ::= shared_decl local_decl 
            {
              Declarations RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> s = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<String> l = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Declarations(s, l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_area",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= decl_area code_area assert_block 
            {
              MProgram RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Declarations d = (Declarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Code> c = (ArrayList<Code>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Assert a = (Assert)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MProgram(d, c, a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		MProgram start_val = (MProgram)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= decl_area code_area 
            {
              MProgram RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Declarations d = (Declarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Code> c = (ArrayList<Code>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MProgram(d, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

