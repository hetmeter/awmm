 	\{COMMENT\}
	
 {processHeader,$1} 	\{PROCESS_KEYWORD\}\s*\{INT,(\d+)\}\s*\{COLON\}
 {localAssignOperator,a} 	\{ATOMIC_LOCAL_ASSIGN\}
 {localAssignOperator,n} 	\{NON_ATOMIC_LOCAL_ASSIGN\}
 {label,$1} 	\{INT,(\d+)\}\s*\{COLON\}
 {nopStatement} 	\{NOP_KEYWORD\}\s*\{SEMICOLON\}
 {gotoStatement,$1} 	\{GOTO_KEYWORD\}\s*\{INT,(\d+)\}\s*\{SEMICOLON\}
 {putStatement,$1,$2,$3,$4,$5} 	\{PUT_KEYWORD\}\s*\{LEFTPARENTHESIS\}\s*\{ID,([an])\}\s*\{COMMA\}\s*\{ID,([an])\}\s*\{RIGHTPARENTHESIS\}\s*\{LEFTPARENTHESIS\}\s*\{ID,(\S+)\}\s*\{COMMA\}\s*\{INT,(\d+)\}\s*\{COMMA\}\s*\{ID,(\S+)\}\s*\{RIGHTPARENTHESIS\}\s*\{SEMICOLON\}
 {getStatement,$1,$2,$3,$4,$5} 	\{ID,(\S+)\}\s*\{EQUALS\}\s*\{GET_KEYWORD\}\s*\{LEFTPARENTHESIS\}\s*\{ID,([an])\}\s*\{COMMA\}\s*\{ID,([an])\}\s*\{RIGHTPARENTHESIS\}\s*\{LEFTPARENTHESIS\}\s*\{ID,(\S+)\}\s*\{COMMA\}\s*\{INT,(\d+)\}\s*\{RIGHTPARENTHESIS\}\s*\{SEMICOLON\}
 {flushStatement,$1} 	\{FLUSH_KEYWORD\}\s*\{LEFTPARENTHESIS\}\s*\{INT,(\d+)\}\s*\{RIGHTPARENTHESIS\}\s*\{SEMICOLON\}
 {binaryIntegerOperation,+} 	\{PLUS\}
 {binaryIntegerOperation,-} 	\{MINUS\}
 {binaryIntegerOperation,*} 	\{ASTERISK\}
 {binaryIntegerOperation,/} 	\{SLASH\}
 {integerTerm,($2,$1,$3)} 	\{integerTerm,(\S+)\}\s*\{binaryIntegerOperation,(\S)\}\s*\{integerTerm,(\S+)\}
 {integerTerm,$1} 	\{LEFTPARENTHESIS\}\s*\{integerTerm,(\S+)\}\s*\{RIGHTPARENTHESIS\}
 {integerTerm,(ID,$1)} 	\{ID,(\S+)\}
 {integerTerm,(INT,$1)} 	\{INT,(\d+)\}
 {localAssignStatement,($2,$1,$3)} 	\{integerTerm,(\S+)\}\s*\{localAssignOperator,(\S)\}\s*\{integerTerm,(\S+)\}\s*\{SEMICOLON\}
 {processInitializationBlock,$1,$2} 	\{processHeader,(\d+)\}\s*\{localAssignStatement,(\S+)\}
 {processInitializationBlock,$1,$2} 	\{processInitializationBlock,(\S+)\}\s*\{localAssignStatement,(\S+)\}
 {initializationBlock,($1)} 	\{BEGINIT_KEYWORD\}\s*\{processInitializationBlock,(\S+)\}
 {initializationBlock,$1,($2)} 	\{initializationBlock,(\S+)\}\s*\{processInitializationBlock,(\S+)\}
 {initializationBlock,$1} 	\{initializationBlock,(\S+)\}\s*\{ENDINIT_KEYWORD\}
 {unaryBooleanOperation,!} 	\{EXCLAMATION\}
 {binaryBooleanOperation,&} 	\{AMPERSAND\}
 {binaryBooleanOperation,|} 	\{PIPE\}
 {binaryIntegerComparison,<=} 	\{LESS_OR_EQUAL\}
 {binaryIntegerComparison,>=} 	\{GREATER_OR_EQUAL\}
 {binaryIntegerComparison,<} 	\{LESS\}
 {binaryIntegerComparison,>} 	\{GREATER\}
 {binaryIntegerComparison,!=} 	\{NOT_EQUAL\}
 {binaryIntegerComparison,==} 	\{EQUAL_TO\}
 {ifHeaderStart} 	\{IF_KEYWORD\}\s*\{LEFTPARENTHESIS\}
 {booleanTerm,($1,$2)} 	\{unaryBooleanOperation,(\S+)\}\s*\{booleanTerm,(\S+)\}
 {booleanTerm,($2,$1,$3)} 	\{booleanTerm,(\S+)\}\s*\{binaryBooleanOperation,(\S+)\}\s*\{booleanTerm,(\S+)\}
 {booleanTerm,($2,$1,$3)} 	\{integerTerm,(\S+)\}\s*\{binaryIntegerComparison,(\S+)\}\s*\{integerTerm,(\S+)\}
 {booleanTerm} 	\{LEFTPARENTHESIS\}\s*\{booleanTerm,(\S+)\}\s*\{RIGHTPARENTHESIS\}
 {ifHeader,$1} 	\{ifHeaderStart\}\s*\{booleanTerm,(\S+)\}\s*\{RIGHTPARENTHESIS\}
 {ifElseBlock,$1,$2,$3} 	\{ifHeader,(\S+)\}\s*\{statement,(\S+)\}\s*\{ELSE_KEYWORD\}\s*\{statement,(\S+)\}
 {ifElseBlock,$1,$2,none} 	\{ifHeader,(\S+)\}\s*\{statement,(\S+)\}
 {statement,(nop)} 	\{nopStatement\}
 {statement,(goto,$1)} 	\{gotoStatement,(\d+)\}
 {statement,(put,$1)} 	\{putStatement,(\S+)\}
 {statement,(get,$1)} 	\{getStatement,(\S+)\}
 {statement,(flush,$1)} 	\{flushStatement,(\d+)\}
 {statement,(ifElse,$1)} 	\{ifElseBlock,(\S+)\}
 {statement,(localAssign,$1)} 	\{localAssignStatement,(\S+)\}
 {statement,$1,$2} 	\{label,(\d+)\}\s*\{statement,(\S+)\}
 {processDeclarationStart,$1,($2)} 	\{processHeader,(\d+)\}\s*\{statement,(\S+)\}
 {processDeclarationStart,$1,($2)} 	\{processDeclarationStart,(\S+)\}\s*\{statement,(\S+)\}
 {processDeclaration,$1} {EOF}	\{processDeclarationStart,(\S+)\}\s*\{EOF\}
 {processDeclaration,$1} {processDeclaration,$2} 	\{processDeclarationStart,(\S+)\}\s*\{processDeclaration,(\S+)\}
 {programDeclaration,(initialization,$1),($2)} 	\{initializationBlock,(\S+)\}\s*\{processDeclaration,(\S+)\}
 {programDeclaration,$1,($2)} 	\{programDeclaration,(\S+)\}\s*\{processDeclaration,(\S+)\}
 {ACCEPTING_STATE,(programDeclaration,$1)} 	\{programDeclaration,(\S+)\}\s*\{EOF\}