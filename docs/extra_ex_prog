/* The RMA language has the following operations:

- remote write: put({a/n},{a/n}) (<destination_var>, <process_of_destination_var>, <source_var>)
		source_var is always local for remote write.

- remote read: <destination_var> = get({a/n}, {a/n}) (<source_var>, <process_of_source_var>)
		destination_var is always local for remote read.

- flush: flush(<target_process>)

The local reads and writes have after the equal sign "(a)" or "(n)" (this corresponds to atomic/non-atomic)

See example below
*/


beginit
 process 1:		//here we split the init area in two parts, 1: and 2:
 X =(a) 0;		// variable X belongs to process 1
 process 2: 		
 Y =(n) 0		// variable Y belongs to process 2
endinit

process 1:

1: put(a, n) (Y, 2, X)	// remote write: writes to variable Y, owned by process 2, the value of X
2: X =(a) 1		// local write
3: put(n, n) (Y, 2, X)
4: flush (2)		// flush: takes as argument the number of the target process
5: X = get(a, a) (Y, 2)	// remote read: reads the value of Y from process 2 and stores it in X
6: c =(n) X		// local read of Y to register c
7: if (c == 1)		// conditions only on local registers (c), not on variables (X, Y)
      goto 5

process 2:


1: put(n, a) (X, 1, Y)
2: Y = get(a, a) (X, 1)
3: f =(a) Y		// local read: reads value of variable Y in the local register f

